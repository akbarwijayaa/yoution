{
	"compiler": {
		"version": "0.8.27+commit.40a35a09"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "ERC1967InvalidImplementation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC1967NonPayable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Reclaim__GroupAlreadyExists",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Reclaim__UserAlreadyMerkelized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UUPSUnauthorizedCallContext",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "slot",
						"type": "bytes32"
					}
				],
				"name": "UUPSUnsupportedProxiableUUID",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "dappId",
						"type": "bytes32"
					}
				],
				"name": "DappCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "id",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "timestampStart",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "timestampEnd",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "addr",
										"type": "address"
									},
									{
										"internalType": "string",
										"name": "host",
										"type": "string"
									}
								],
								"internalType": "struct Reclaim.Witness[]",
								"name": "witnesses",
								"type": "tuple[]"
							},
							{
								"internalType": "uint8",
								"name": "minimumWitnessesForClaimCreation",
								"type": "uint8"
							}
						],
						"indexed": false,
						"internalType": "struct Reclaim.Epoch",
						"name": "epoch",
						"type": "tuple"
					}
				],
				"name": "EpochAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "groupId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "provider",
						"type": "string"
					}
				],
				"name": "GroupCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "UPGRADE_INTERFACE_VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "host",
								"type": "string"
							}
						],
						"internalType": "struct Reclaim.Witness[]",
						"name": "witnesses",
						"type": "tuple[]"
					},
					{
						"internalType": "uint8",
						"name": "requisiteWitnessesForClaimCreate",
						"type": "uint8"
					}
				],
				"name": "addNewEpoch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "createDapp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "provider",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "merkleTreeDepth",
						"type": "uint256"
					}
				],
				"name": "createGroup",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentEpoch",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "epochDurationS",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "epochs",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "id",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "timestampStart",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "timestampEnd",
						"type": "uint32"
					},
					{
						"internalType": "uint8",
						"name": "minimumWitnessesForClaimCreation",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "data",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "target",
						"type": "string"
					}
				],
				"name": "extractFieldFromContext",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "epoch",
						"type": "uint32"
					}
				],
				"name": "fetchEpoch",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "id",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "timestampStart",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "timestampEnd",
								"type": "uint32"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "addr",
										"type": "address"
									},
									{
										"internalType": "string",
										"name": "host",
										"type": "string"
									}
								],
								"internalType": "struct Reclaim.Witness[]",
								"name": "witnesses",
								"type": "tuple[]"
							},
							{
								"internalType": "uint8",
								"name": "minimumWitnessesForClaimCreation",
								"type": "uint8"
							}
						],
						"internalType": "struct Reclaim.Epoch",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "epoch",
						"type": "uint32"
					},
					{
						"internalType": "bytes32",
						"name": "identifier",
						"type": "bytes32"
					},
					{
						"internalType": "uint32",
						"name": "timestampS",
						"type": "uint32"
					}
				],
				"name": "fetchWitnessesForClaim",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "host",
								"type": "string"
							}
						],
						"internalType": "struct Reclaim.Witness[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "provider",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "params",
						"type": "string"
					}
				],
				"name": "getMerkelizedUserParams",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "provider",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "parameters",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "context",
										"type": "string"
									}
								],
								"internalType": "struct Claims.ClaimInfo",
								"name": "claimInfo",
								"type": "tuple"
							},
							{
								"components": [
									{
										"components": [
											{
												"internalType": "bytes32",
												"name": "identifier",
												"type": "bytes32"
											},
											{
												"internalType": "address",
												"name": "owner",
												"type": "address"
											},
											{
												"internalType": "uint32",
												"name": "timestampS",
												"type": "uint32"
											},
											{
												"internalType": "uint32",
												"name": "epoch",
												"type": "uint32"
											}
										],
										"internalType": "struct Claims.CompleteClaimData",
										"name": "claim",
										"type": "tuple"
									},
									{
										"internalType": "bytes[]",
										"name": "signatures",
										"type": "bytes[]"
									}
								],
								"internalType": "struct Claims.SignedClaim",
								"name": "signedClaim",
								"type": "tuple"
							}
						],
						"internalType": "struct Reclaim.Proof",
						"name": "proof",
						"type": "tuple"
					}
				],
				"name": "getProviderFromProof",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_semaphoreAddress",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "provider",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "parameters",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "context",
										"type": "string"
									}
								],
								"internalType": "struct Claims.ClaimInfo",
								"name": "claimInfo",
								"type": "tuple"
							},
							{
								"components": [
									{
										"components": [
											{
												"internalType": "bytes32",
												"name": "identifier",
												"type": "bytes32"
											},
											{
												"internalType": "address",
												"name": "owner",
												"type": "address"
											},
											{
												"internalType": "uint32",
												"name": "timestampS",
												"type": "uint32"
											},
											{
												"internalType": "uint32",
												"name": "epoch",
												"type": "uint32"
											}
										],
										"internalType": "struct Claims.CompleteClaimData",
										"name": "claim",
										"type": "tuple"
									},
									{
										"internalType": "bytes[]",
										"name": "signatures",
										"type": "bytes[]"
									}
								],
								"internalType": "struct Claims.SignedClaim",
								"name": "signedClaim",
								"type": "tuple"
							}
						],
						"internalType": "struct Reclaim.Proof",
						"name": "proof",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "_identityCommitment",
						"type": "uint256"
					}
				],
				"name": "merkelizeUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "semaphoreAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "provider",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_merkleTreeRoot",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_signal",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_nullifierHash",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_externalNullifier",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "dappId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[8]",
						"name": "_proof",
						"type": "uint256[8]"
					}
				],
				"name": "verifyMerkelIdentity",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "provider",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "parameters",
										"type": "string"
									},
									{
										"internalType": "string",
										"name": "context",
										"type": "string"
									}
								],
								"internalType": "struct Claims.ClaimInfo",
								"name": "claimInfo",
								"type": "tuple"
							},
							{
								"components": [
									{
										"components": [
											{
												"internalType": "bytes32",
												"name": "identifier",
												"type": "bytes32"
											},
											{
												"internalType": "address",
												"name": "owner",
												"type": "address"
											},
											{
												"internalType": "uint32",
												"name": "timestampS",
												"type": "uint32"
											},
											{
												"internalType": "uint32",
												"name": "epoch",
												"type": "uint32"
											}
										],
										"internalType": "struct Claims.CompleteClaimData",
										"name": "claim",
										"type": "tuple"
									},
									{
										"internalType": "bytes[]",
										"name": "signatures",
										"type": "bytes[]"
									}
								],
								"internalType": "struct Claims.SignedClaim",
								"name": "signedClaim",
								"type": "tuple"
							}
						],
						"internalType": "struct Reclaim.Proof",
						"name": "proof",
						"type": "tuple"
					}
				],
				"name": "verifyProof",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				],
				"ERC1967InvalidImplementation(address)": [
					{
						"details": "The `implementation` of the proxy is invalid."
					}
				],
				"ERC1967NonPayable()": [
					{
						"details": "An upgrade function sees `msg.value > 0` that may be lost."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"UUPSUnauthorizedCallContext()": [
					{
						"details": "The call is from an unauthorized context."
					}
				],
				"UUPSUnsupportedProxiableUUID(bytes32)": [
					{
						"details": "The storage `slot` is unsupported as a UUID."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"Upgraded(address)": {
					"details": "Emitted when the implementation is upgraded."
				}
			},
			"kind": "dev",
			"methods": {
				"addNewEpoch((address,string)[],uint8)": {
					"details": "Add a new epoch"
				},
				"fetchEpoch(uint32)": {
					"params": {
						"epoch": "the epoch number to fetch; pass 0 to fetch the current epoch"
					}
				},
				"initialize(address)": {
					"details": "This acts as a constructor for the upgradeable proxy contract"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgradeToAndCall(address,bytes)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"currentEpoch()": {
					"notice": "current epoch. starts at 1, so that the first epoch is 1 "
				},
				"epochDurationS()": {
					"notice": "duration of each epoch. is not a hard duration, but useful for caching purposes "
				},
				"epochs(uint256)": {
					"notice": "list of all epochs "
				},
				"fetchEpoch(uint32)": {
					"notice": "Fetch an epoch"
				},
				"fetchWitnessesForClaim(uint32,bytes32,uint32)": {
					"notice": "Get the witnesses that'll sign the claim"
				},
				"getProviderFromProof(((string,string,string),((bytes32,address,uint32,uint32),bytes[])))": {
					"notice": "Get the provider name from the proof"
				},
				"initialize(address)": {
					"notice": "Calls initialize on the base contracts"
				},
				"semaphoreAddress()": {
					"notice": "address of the semaphore contract "
				},
				"verifyProof(((string,string,string),((bytes32,address,uint32,uint32),bytes[])))": {
					"notice": "Call the function to assert the validity of several claims proofs"
				}
			},
			"notice": "Reclaim Beacon contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/reclaim/Reclaim.sol": "Reclaim"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6683e6ade6985d394d32baaef5eea0d8b9ff0b3eca86ae413d6cdde114a9930",
				"dweb:/ipfs/QmdBE8T1BTddZxpdECMsb3KiCFyjNWmxcCddYrWFTXmWPj"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef381843676aec64421200ee85eaa0b1356a35f28b9fc67e746a6bbb832077d9",
				"dweb:/ipfs/QmY8aorMYA2TeTCnu6ejDjzb4rW4t7TCtW4GZ6LoxTFm7v"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
			"keccak256": "0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65",
			"license": "MIT",
			"urls": [
				"bzz-raw://547d21aa17f4f3f1a1a7edf7167beff8dd9496a0348d5588f15cc8a4b29d052a",
				"dweb:/ipfs/QmT16JtRQSWNpLo9W23jr6CzaMuTAcQcjJJcdRd8HLJ6cE"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa",
				"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418",
			"license": "MIT",
			"urls": [
				"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c",
				"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
				"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
			]
		},
		"src/reclaim/BytesUtils.sol": {
			"keccak256": "0x1585d90a138e181c3e75fc5c62f4b3c75b971b5de216acd6d428cd5781376481",
			"license": "MIT",
			"urls": [
				"bzz-raw://87a7a77daeeec8d9d75429fa72112011a585f93a5d3ad2f9d531219abbace179",
				"dweb:/ipfs/Qmdg7yrHLL5iiAmRNXAKVN6ro4XJbSRYYDYXnXizPYB2M1"
			]
		},
		"src/reclaim/Claims.sol": {
			"keccak256": "0x87a41e75d358e86798456ad45e03446cde8f1519c8af17905f6c8b852a5f2da7",
			"license": "MIT",
			"urls": [
				"bzz-raw://d9a30ac22e8d001ffd6d6dc1381118f23868071a438052752411eb0100c27d81",
				"dweb:/ipfs/QmWPK2BEX2jKa9R2ugLy3D5n74Xd82zHFs9acoxeL3AEXw"
			]
		},
		"src/reclaim/Random.sol": {
			"keccak256": "0xa655d097eadd8170296bbc2362347c8a4111cf791a5a49fb61003c5474731831",
			"license": "MIT",
			"urls": [
				"bzz-raw://43ac2db3f6fe32d357071f92bf23e75e78833ae663f540db940568efaa80634c",
				"dweb:/ipfs/QmRnHDLtCeov3vaPVYqDLwVhJfJsFj9ia1AG9aBgLkwUdB"
			]
		},
		"src/reclaim/Reclaim.sol": {
			"keccak256": "0xa8b27be4d22257a504405785c6aff2038b5ee30587f24e2da9bb6221e3cc79a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://c162f145fec8d55a1c57fff349db16ebbd702995d12bd521f3a6d4af51e3c7f7",
				"dweb:/ipfs/QmX2SUQCfGfpbJdbT6xmTf3L1yb7DFMAF8vvduPCUHdha1"
			]
		},
		"src/reclaim/SemaphoreInterface.sol": {
			"keccak256": "0xca15f7c3bb69336a27d36336758251f1025446a45797c82816feb8c899d85917",
			"license": "MIT",
			"urls": [
				"bzz-raw://3a84f98dcf4f0e19a42f814936fc4ceb51fbb2f8afcd7fbd4719b39eddb8484d",
				"dweb:/ipfs/QmPMd831GuUSmt4B7KdyWcmnm8zwqwcS3uWfYtWp5VXnwn"
			]
		},
		"src/reclaim/StringUtils.sol": {
			"keccak256": "0x15feebafef16d4c74c043b39e652ddae0e121987ceca74b663f6a2d2d7ba8b4b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7922027bc4c7e6ef1a5837b06b71678d79a1586c218b330cbb1ce505ab9494ef",
				"dweb:/ipfs/QmYyTfD777LaQpzXf48dVBmMZAJpqXRhELeeTyT4jSCLne"
			]
		}
	},
	"version": 1
}